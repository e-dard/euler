package main

import (
    "fmt"
    "time"
)

/*
If we list all the natural numbers below 10 that are multiples of 3 or
5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

Solution: 233168
Time: ~0.003ms
*/
func multiples_of_three_and_five() int {
    sum := 0
    for i := 0; i < 1000; i++ {
        if i % 3 == 0 || i % 5 == 0 {
            sum += i
        }
    }
    return sum
}


/*
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms
will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do
not exceed four million, find the sum of the even-valued terms.

Solution: 4613732
Time: 
*/
func even_fibonacci_numbers() int64 {
    a, b, sum := int64(0), int64(1), int64(0)
    for x := 0; x < 4000000; x++ {
        if a % 2 == 0 {
            sum += a
            // fmt.Println(sum, a, x)
        }
        a, b = b, a + b
    }
    return sum
}


func main() {
    start := time.Now()
    res := even_fibonacci_numbers() 
    total := time.Since(start)
    fmt.Println(res)
    fmt.Println(total)
}