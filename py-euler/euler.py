
from time import time
from itertools import takewhile, combinations
from functools import wraps


def timed(f):
    @wraps(f)
    def wrapper(*args, **kwds):
        start = time()
        result = f(*args, **kwds)
        elapsed = time() - start
        print "%s took %f time to finish" % (f.__name__, elapsed * 1000)
        return result
    return wrapper


def multiples_of_three_and_five():
    """
    If we list all the natural numbers below 10 that are multiples of 3
    or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.

    Solution: 233168
    Time: ~0.16ms
    """
    return sum(x for x in xrange(1, 1000) if x % 3 == 0 or x % 5 == 0)


def even_fibonacci_numbers():
    """
    Each new term in the Fibonacci sequence is generated by adding the
    previous two terms. By starting with 1 and 2, the first 10 terms
    will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do
    not exceed four million, find the sum of the even-valued terms.

    Solution: 4613732
    Time: ~0.29ms
    """
    def even_fib():
        a, b = 1, 1
        while True:
            if a % 2 == 0:
                yield a
            a, b = b, a + b
    return sum(takewhile(lambda x: x < 4000000, even_fib()))


def largest_prime_factor():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?

    Solution: 6857
    Time: ~1.44ms
    """
    numerator = 600851475143
    divisor = 1
    while numerator > 1:
        divisor = divisor + 1
        while numerator % divisor == 0:
            numerator /= divisor
    return divisor


def largest_palendrome_product():
    """
    A palindromic number reads the same both ways. The largest
    palindrome made from the product of two 2-digit numbers is 9009 = 91
    99.

    Find the largest palindrome made from the product of two 3-digit
    numbers.

    Solution: 906609
    Time: ~340ms
    """
    combs = combinations(range(999, 99, -1), 2)
    combs = sorted(combs, key=lambda (x, y): x + y, reverse=True)
    for x, y in combs:
        product = x * y
        if product == int(str(product)[::-1]):
            return product
